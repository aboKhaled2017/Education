{"version":3,"file":"videojsPlaylist.js","sourceRoot":"","sources":["videojsPlaylist.ts"],"names":[],"mappings":"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","sourcesContent":[" import videojs from 'video.js';\r\n \r\n \r\n interface videoItem{\r\n  name:string;\r\n  description?:string;\r\n\r\n  duration?:number;\r\n  sources:{src:string}[]|string|videojs.Tech.SourceObject|videojs.Tech.SourceObject[];\r\n  thumbnail?:{srcset:string,media:string,type:string}[];\r\n  poster?:string,\r\n  textTracks?:string[];\r\n  [otherProp:string]:any;\r\n }\r\n interface playlistObject{\r\n    autoadvance_:{\r\n        timeout:number|null,\r\n        trigger:((params:any[])=>void)|null,\r\n        delay:number|null,\r\n        \r\n    },\r\n    next:()=>void,\r\n    currentIndex_:number\r\n }\r\n interface videoItemObjectInList{\r\n  sources:string|videojs.Tech.SourceObject|videojs.Tech.SourceObject[],\r\n  poster:string,\r\n  textTracks:string[]\r\n}\r\ninterface AutoAdvance{\r\n  timeout?:number|null,\r\n  trigger:((params:any[])=>void)|null,\r\n  delay?:number|null,\r\n  currentIndex_?:number,\r\n   }\r\n interface Playlist{\r\n  indexOf(value:string|{sources:string[]}): number;\r\n  contains: (value: any) => boolean;\r\n  currentIndex: () => number;\r\n  lastIndex: () => number;\r\n  nextIndex: () => number;\r\n  previousIndex: () => any;\r\n  first: () => videoItem|void;\r\n  last: () => videoItem|void;\r\n  previous: () => videoItem|void;\r\n  autoadvance: (delay: any) => void;\r\n  repeat: (val: any) => boolean|void ;\r\n  sort: (compare: any) => void;\r\n  reverse: () => void;\r\n  shuffle: (_temp: any) => void;\r\n   (newList:videoItem[], newIndex?:number):videoItem[],\r\n   currentIndex_:number,\r\n   player_:videojs.Player,\r\n   autoadvance_:{\r\n     timeout?:number|null,\r\n     trigger?:((params:any[])=>void)|null,\r\n     delay?:number|null,\r\n     \r\n   },\r\n   next:()=>void,\r\n   repeat_:boolean,\r\n   currentItem:(num?:number)=>number\r\n}\r\n    /**\r\n     * Validates a number of seconds to use as the auto-advance delay.\r\n     *\r\n     * @private\r\n     * @param   {number} s\r\n     *          The number to check\r\n     *\r\n     * @return  {boolean}\r\n     *          Whether this is a valid second or not\r\n     */\r\n    var validSeconds = function validSeconds(s:any) {\r\n      return typeof s === 'number' && !isNaN(s) && s >= 0 && s < Infinity;\r\n    };\r\n    /**\r\n     * Resets the auto-advance behavior of a player.\r\n     *\r\n     * @param {Player} player\r\n     *        The player to reset the behavior on\r\n     */\r\n  \r\n    var reset = function reset(player:videojs.Player) {\r\n      var aa = player.playlist.autoadvance_;\r\n  \r\n      if (aa.timeout) {\r\n        player.clearTimeout(aa.timeout);\r\n      }\r\n  \r\n      if (aa.trigger) {\r\n        player.off('ended', aa.trigger);\r\n      }\r\n  \r\n      aa.timeout = null;\r\n      aa.trigger = null;\r\n    };\r\n    /**\r\n     * Sets up auto-advance behavior on a player.\r\n     *\r\n     * @param  {Player} player\r\n     *         the current player\r\n     *\r\n     * @param  {number} delay\r\n     *         The number of seconds to wait before each auto-advance.\r\n     *\r\n     * @return {undefined}\r\n     *         Used to short circuit function logic\r\n     */\r\n  \r\n  \r\n    var setup = function setup(player:videojs.Player, delay:number) {\r\n      reset(player); // Before queuing up new auto-advance behavior, check if `seconds` was\r\n      // called with a valid value.\r\n  \r\n      if (!validSeconds(delay)) {\r\n        player.playlist.autoadvance_.delay = null;\r\n        return;\r\n      }\r\n  \r\n      player.playlist.autoadvance_.delay = delay;\r\n  \r\n      player.playlist.autoadvance_.trigger = function () {\r\n        // This calls setup again, which will reset the existing auto-advance and\r\n        // set up another auto-advance for the next \"ended\" event.\r\n        var cancelOnPlay = function cancelOnPlay() {\r\n          return setup(player, delay);\r\n        }; // If there is a \"play\" event while we're waiting for an auto-advance,\r\n        // we need to cancel the auto-advance. This could mean the user seeked\r\n        // back into the content or restarted the content. This is reproducible\r\n        // with an auto-advance > 0.\r\n  \r\n  \r\n        player.one('play', cancelOnPlay);\r\n        player.playlist.autoadvance_.timeout = player.setTimeout(function () {\r\n          reset(player);\r\n          player.off('play', cancelOnPlay);\r\n          player.playlist.next();\r\n        }, delay * 1000);\r\n      };\r\n  \r\n      player.one('ended', player.playlist.autoadvance_.trigger);\r\n    };\r\n  \r\n    /**\r\n     * Removes all remote text tracks from a player.\r\n     *\r\n     * @param  {Player} player\r\n     *         The player to clear tracks on\r\n     */\r\n  \r\n    var clearTracks = function clearTracks(player:videojs.Player) {\r\n      var tracks = player.remoteTextTracks();\r\n      var i = tracks && tracks.length || 0; // This uses a `while` loop rather than `forEach` because the\r\n      // `TextTrackList` object is a live DOM list (not an array).\r\n  \r\n      while (i--) {\r\n        player.removeRemoteTextTrack(tracks[i] as unknown as HTMLTrackElement);\r\n      }\r\n    };\r\n    /**\r\n     * Plays an item on a player's playlist.\r\n     *\r\n     * @param  {Player} player\r\n     *         The player to play the item on\r\n     *\r\n     * @param  {Object} item\r\n     *         A source from the playlist.\r\n     *\r\n     * @return {Player}\r\n     *         The player that is now playing the item\r\n     */\r\n  \r\n    var playItem = function playItem(player:videojs.Player, item:videoItem) {\r\n      var replay = !player.paused() || player.ended();\r\n      player.trigger('beforeplaylistitem', item);\r\n      player.poster(item.poster || '');\r\n      player.src(item.sources);\r\n      clearTracks(player);\r\n      player.ready(function () {\r\n        (item.textTracks || []).forEach(\r\n            player.addRemoteTextTrack.bind(player)as unknown as (a:string,b:number,c:string[])=>void\r\n            );\r\n        player.trigger('playlistitem', item);\r\n  \r\n        if (replay) {\r\n          var playPromise = player.play(); // silence error when a pause interrupts a play request\r\n          // on browsers which return a promise\r\n  \r\n          if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\r\n            playPromise.then(null, function (e) {});\r\n          }\r\n        }\r\n  \r\n        setup(player, player.playlist.autoadvance_.delay as number);\r\n      });\r\n      if(item.description)\r\n      $((player as videojs.Player).el()).find('#subPlayerSection>p#descEl').text(item.description);\r\n      return player;\r\n    };\r\n  \r\n    /**\r\n     * Given two sources, check to see whether the two sources are equal.\r\n     * If both source urls have a protocol, the protocols must match, otherwise, protocols\r\n     * are ignored.\r\n     *\r\n     * @private\r\n     * @param {string|Object} source1\r\n     *        The first source\r\n     *\r\n     * @param {string|Object} source2\r\n     *        The second source\r\n     *\r\n     * @return {boolean}\r\n     *         The result\r\n     */\r\n  \r\n    var sourceEquals = function sourceEquals(source1:{src:string}|string, source2:{src:string}|string) {\r\n      var src1 = source1;\r\n      var src2 = source2;\r\n  \r\n      if (typeof source1 === 'object') {\r\n        src1 = source1.src;\r\n      }\r\n  \r\n      if (typeof source2 === 'object') {\r\n        src2 = source2.src;\r\n      }\r\n  \r\n      if (/^\\/\\//.test(src1 as string)) {\r\n        src2 = (src2 as string).slice((src2 as string).indexOf('//'));\r\n      }\r\n  \r\n      if (/^\\/\\//.test(src2 as string)) {\r\n        src1 = (src1 as string).slice((src1 as string).indexOf('//'));\r\n      }\r\n  \r\n      return src1 === src2;\r\n    };\r\n    /**\r\n     * Look through an array of playlist items for a specific `source`;\r\n     * checking both the value of elements and the value of their `src`\r\n     * property.\r\n     *\r\n     * @private\r\n     * @param   {Array} arr\r\n     *          An array of playlist items to look through\r\n     *\r\n     * @param   {string} src\r\n     *          The source to look for\r\n     *\r\n     * @return  {number}\r\n     *          The index of that source or -1\r\n     */\r\n  \r\n    var indexInSources = function indexInSources(arr:{sources:string[]}[], src:string) {\r\n      for (var i = 0; i < arr.length; i++) {\r\n        var sources = arr[i].sources;\r\n  \r\n        if (Array.isArray(sources)) {\r\n          for (var j = 0; j < sources.length; j++) {\r\n            var source = sources[j];\r\n  \r\n            if (source && sourceEquals(source, src)) {\r\n              return i;\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      return -1;\r\n    };\r\n    /**\r\n     * Randomize the contents of an array.\r\n     *\r\n     * @private\r\n     * @param  {Array} arr\r\n     *         An array.\r\n     *\r\n     * @return {Array}\r\n     *         The same array that was passed in.\r\n     */\r\n  \r\n    var randomize = function randomize(arr:any[]) {\r\n      var index = -1;\r\n      var lastIndex = arr.length - 1;\r\n  \r\n      while (++index < arr.length) {\r\n        var rand = index + Math.floor(Math.random() * (lastIndex - index + 1));\r\n        var value = arr[rand];\r\n        arr[rand] = arr[index];\r\n        arr[index] = value;\r\n      }\r\n  \r\n      return arr;\r\n    };\r\n    /**\r\n     * Factory function for creating new playlist implementation on the given player.\r\n     *\r\n     * API summary:\r\n     *\r\n     * playlist(['a', 'b', 'c']) // setter\r\n     * playlist() // getter\r\n     * playlist.currentItem() // getter, 0\r\n     * playlist.currentItem(1) // setter, 1\r\n     * playlist.next() // 'c'\r\n     * playlist.previous() // 'b'\r\n     * playlist.first() // 'a'\r\n     * playlist.last() // 'c'\r\n     * playlist.autoadvance(5) // 5 second delay\r\n     * playlist.autoadvance() // cancel autoadvance\r\n     *\r\n     * @param  {Player} player\r\n     *         The current player\r\n     *\r\n     * @param  {Array=} initialList\r\n     *         If given, an initial list of sources with which to populate\r\n     *         the playlist.\r\n     *\r\n     * @param  {number=}  initialIndex\r\n     *         If given, the index of the item in the list that should\r\n     *         be loaded first. If -1, no video is loaded. If omitted, The\r\n     *         the first video is loaded.\r\n     *\r\n     * @return {Function}\r\n     *         Returns the playlist function specific to the given player.\r\n     */\r\n  \r\n    function factory(player:videojs.Player, initialList:{}[], initialIndex:number):Playlist{\r\n      if (initialIndex === void 0) {\r\n        initialIndex = 0;\r\n      }\r\n  \r\n      let list:videoItem[]|null = null;\r\n      var changing = false;\r\n      /**\r\n       * Get/set the playlist for a player.\r\n       *\r\n       * This function is added as an own property of the player and has its\r\n       * own methods which can be called to manipulate the internal state.\r\n       *\r\n       * @param  {Array} [newList]\r\n       *         If given, a new list of sources with which to populate the\r\n       *         playlist. Without this, the function acts as a getter.\r\n       *\r\n       * @param  {number}  [newIndex]\r\n       *         If given, the index of the item in the list that should\r\n       *         be loaded first. If -1, no video is loaded. If omitted, The\r\n       *         the first video is loaded.\r\n       *\r\n       * @return {Array}\r\n       *         The playlist\r\n       */\r\n  \r\n      var playlist=player.playlist= <Playlist>function (newList:videoItem[], newIndex:number):videoItem[]{\r\n        if (newIndex === void 0) {\r\n          newIndex = 0;\r\n        }\r\n        if (changing) {\r\n          throw new Error('do not call playlist() during a playlist change');\r\n        }\r\n  \r\n        if (Array.isArray(newList)) {\r\n          // @todo - Simplify this to `list.slice()` for v5.\r\n          var previousPlaylist = Array.isArray(list) ? list.slice() : null;\r\n          list = newList.slice(); // Mark the playlist as changing during the duringplaylistchange lifecycle.\r\n  \r\n          changing = true;\r\n          player.trigger({\r\n            type: 'duringplaylistchange',\r\n            nextIndex: newIndex,\r\n            nextPlaylist: list,\r\n            previousIndex: playlist.currentIndex_,\r\n            // @todo - Simplify this to simply pass along `previousPlaylist` for v5.\r\n            previousPlaylist: previousPlaylist || []\r\n          });\r\n          changing = false;\r\n  \r\n          if (newIndex !== -1) {\r\n            playlist.currentItem(newIndex);\r\n          } // The only time the previous playlist is null is the first call to this\r\n          // function. This allows us to fire the `duringplaylistchange` event\r\n          // every time the playlist is populated and to maintain backward\r\n          // compatibility by not firing the `playlistchange` event on the initial\r\n          // population of the list.\r\n          //\r\n          // @todo - Remove this condition in preparation for v5.\r\n  \r\n  \r\n          if (previousPlaylist) {\r\n            player.setTimeout(function () {\r\n              player.trigger('playlistchange');\r\n            }, 0);\r\n          }\r\n        } // Always return a shallow clone of the playlist list.\r\n\r\n        return (list as videoItem[]).slice();\r\n      }; // On a new source, if there is no current item, disable auto-advance.\r\n      player.on('loadstart', function () {\r\n        if (playlist.currentItem() === -1) {\r\n          reset(player);\r\n        }\r\n      });\r\n      playlist.currentIndex_ = -1;\r\n      playlist.player_ = player;\r\n      playlist.autoadvance_ = {};\r\n      playlist.repeat_ = false;\r\n\r\n      /**\r\n       * Get or set the current item in the playlist.\r\n       *\r\n       * During the duringplaylistchange event, acts only as a getter.\r\n       *\r\n       * @param  {number} [index]\r\n       *         If given as a valid value, plays the playlist item at that index.\r\n       *\r\n       * @return {number}\r\n       *         The current item index.\r\n       */\r\n  \r\n      playlist.currentItem = function (index) {\r\n        // If the playlist is changing, only act as a getter.\r\n        if (changing) {\r\n          return playlist.currentIndex_;\r\n        }\r\n  \r\n        if (typeof index === 'number' && playlist.currentIndex_ !== index && index >= 0 && index < (list as videoItem[]).length) {\r\n          playlist.currentIndex_ = index;\r\n          playItem(playlist.player_,(list as videoItem[])[playlist.currentIndex_]);\r\n        } else {\r\n          playlist.currentIndex_ = playlist.indexOf(playlist.player_.currentSrc() || '');\r\n        }\r\n  \r\n        return playlist.currentIndex_;\r\n      };\r\n      /**\r\n       * Checks if the playlist contains a value.\r\n       *\r\n       * @param  {string|Object|Array} value\r\n       *         The value to check\r\n       *\r\n       * @return {boolean}\r\n       *         The result\r\n       */\r\n  \r\n  \r\n      playlist.contains = function (value:string) {\r\n        return playlist.indexOf(value) !== -1;\r\n      };\r\n      /**\r\n       * Gets the index of a value in the playlist or -1 if not found.\r\n       *\r\n       * @param  {string|Object|Array} value\r\n       *         The value to find the index of\r\n       *\r\n       * @return {number}\r\n       *         The index or -1\r\n       */\r\n  \r\n  \r\n      playlist.indexOf = function (value:string|{sources:string[]}) {\r\n        if (typeof value === 'string') {//problem here\r\n          return indexInSources(list as unknown as {sources:string[]}[], value);\r\n        }\r\n  \r\n        var sources = Array.isArray(value) ? value : value.sources;\r\n  \r\n        for (var i = 0; i < sources.length; i++) {\r\n          var source = sources[i];\r\n  \r\n          if (typeof source === 'string') {\r\n            return indexInSources(list as unknown as {sources:string[]}[], source);\r\n          } else if (source.src) {\r\n            return indexInSources(list as unknown as {sources:string[]}[], source.src);\r\n          }\r\n        }\r\n  \r\n        return -1;\r\n      };\r\n      /**\r\n       * Get the index of the current item in the playlist. This is identical to\r\n       * calling `currentItem()` with no arguments.\r\n       *\r\n       * @return {number}\r\n       *         The current item index.\r\n       */\r\n  \r\n  \r\n      playlist.currentIndex = function () {\r\n        return playlist.currentItem();\r\n      };\r\n      /**\r\n       * Get the index of the last item in the playlist.\r\n       *\r\n       * @return {number}\r\n       *         The index of the last item in the playlist or -1 if there are no\r\n       *         items.\r\n       */\r\n  \r\n  \r\n      playlist.lastIndex = function () {\r\n        return (list as videoItemObjectInList[]).length - 1;\r\n      };\r\n      /**\r\n       * Get the index of the next item in the playlist.\r\n       *\r\n       * @return {number}\r\n       *         The index of the next item in the playlist or -1 if there is no\r\n       *         current item.\r\n       */\r\n  \r\n  \r\n      playlist.nextIndex = function () {\r\n        var current = playlist.currentItem();\r\n  \r\n        if (current === -1) {\r\n          return -1;\r\n        }\r\n  \r\n        var lastIndex = playlist.lastIndex(); // When repeating, loop back to the beginning on the last item.\r\n  \r\n        if (playlist.repeat_ && current === lastIndex) {\r\n          return 0;\r\n        } // Don't go past the end of the playlist.\r\n  \r\n  \r\n        return Math.min(current + 1, lastIndex);\r\n      };\r\n      /**\r\n       * Get the index of the previous item in the playlist.\r\n       *\r\n       * @return {number}\r\n       *         The index of the previous item in the playlist or -1 if there is\r\n       *         no current item.\r\n       */\r\n  \r\n  \r\n      playlist.previousIndex = function () {\r\n        var current = playlist.currentItem();\r\n  \r\n        if (current === -1) {\r\n          return -1;\r\n        } // When repeating, loop back to the end of the playlist.\r\n  \r\n  \r\n        if (playlist.repeat_ && current === 0) {\r\n          return playlist.lastIndex();\r\n        } // Don't go past the beginning of the playlist.\r\n  \r\n  \r\n        return Math.max(current - 1, 0);\r\n      };\r\n      /**\r\n       * Plays the first item in the playlist.\r\n       *\r\n       * @return {Object|undefined}\r\n       *         Returns undefined and has no side effects if the list is empty.\r\n       */\r\n  \r\n  \r\n      playlist.first =function () {\r\n        if (changing) {\r\n          return;\r\n        }\r\n  \r\n        if ((list as videoItem[]).length) {\r\n          return (list as videoItem[])[playlist.currentItem(0)];\r\n        }\r\n  \r\n        playlist.currentIndex_ = -1;\r\n      };\r\n      /**\r\n       * Plays the last item in the playlist.\r\n       *\r\n       * @return {Object|undefined}\r\n       *         Returns undefined and has no side effects if the list is empty.\r\n       */\r\n  \r\n  \r\n      playlist.last = function () {\r\n        if (changing) {\r\n          return;\r\n        }\r\n  \r\n        if ((list as videoItem[]).length) {\r\n          return (list as videoItem[])[playlist.currentItem(playlist.lastIndex())];\r\n        }\r\n  \r\n        playlist.currentIndex_ = -1;\r\n      };\r\n      /**\r\n       * Plays the next item in the playlist.\r\n       *\r\n       * @return {Object|undefined}\r\n       *         Returns undefined and has no side effects if on last item.\r\n       */\r\n  \r\n  \r\n      playlist.next = function () {\r\n        if (changing) {\r\n          return;\r\n        }\r\n  \r\n        var index = playlist.nextIndex();\r\n  \r\n        if (index !== playlist.currentIndex_) {\r\n          return (list as videoItemObjectInList[])[playlist.currentItem(index)];\r\n        }\r\n      };\r\n      /**\r\n       * Plays the previous item in the playlist.\r\n       *\r\n       * @return {Object|undefined}\r\n       *         Returns undefined and has no side effects if on first item.\r\n       */\r\n  \r\n  \r\n      playlist.previous = function () {\r\n        if (changing) {\r\n          return;\r\n        }\r\n  \r\n        var index = playlist.previousIndex();\r\n  \r\n        if (index !== playlist.currentIndex_) {\r\n          return (list as videoItem[])[playlist.currentItem(index)];\r\n        }\r\n      };\r\n      /**\r\n       * Set up auto-advance on the playlist.\r\n       *\r\n       * @param  {number} [delay]\r\n       *         The number of seconds to wait before each auto-advance.\r\n       */\r\n  \r\n  \r\n      playlist.autoadvance = function (delay) {\r\n        setup(playlist.player_, delay);\r\n      };\r\n      /**\r\n       * Sets `repeat` option, which makes the \"next\" video of the last video in\r\n       * the playlist be the first video in the playlist.\r\n       *\r\n       * @param  {boolean} [val]\r\n       *         The value to set repeat to\r\n       *\r\n       * @return {boolean}\r\n       *         The current value of repeat\r\n       */\r\n  \r\n  \r\n      playlist.repeat = function (val) {\r\n        if (val === undefined) {\r\n          return playlist.repeat_;\r\n        }\r\n  \r\n        if (typeof val !== 'boolean') {\r\n          videojs.log.error('videojs-playlist: Invalid value for repeat', val);\r\n          return;\r\n        }\r\n  \r\n        playlist.repeat_ = !!val;\r\n        return playlist.repeat_;\r\n      };\r\n      /**\r\n       * Sorts the playlist array.\r\n       *\r\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort}\r\n       * @fires playlistsorted\r\n       *\r\n       * @param {Function} compare\r\n       *        A comparator function as per the native Array method.\r\n       */\r\n  \r\n  \r\n      playlist.sort = function (compare) {\r\n        // Bail if the array is empty.\r\n        if (!(list as videoItem[]).length) {\r\n          return;\r\n        }\r\n  \r\n        (list as videoItem[]).sort(compare); // If the playlist is changing, don't trigger events.\r\n  \r\n        if (changing) {\r\n          return;\r\n        }\r\n        /**\r\n         * Triggered after the playlist is sorted internally.\r\n         *\r\n         * @event playlistsorted\r\n         * @type {Object}\r\n         */\r\n  \r\n  \r\n        player.trigger('playlistsorted');\r\n      };\r\n      /**\r\n       * Reverses the playlist array.\r\n       *\r\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse}\r\n       * @fires playlistsorted\r\n       */\r\n  \r\n  \r\n      playlist.reverse = function () {\r\n        // Bail if the array is empty.\r\n        if (!(list as videoItemObjectInList[]).length) {\r\n          return;\r\n        }\r\n  \r\n        (list as videoItemObjectInList[]).reverse(); // If the playlist is changing, don't trigger events.\r\n  \r\n        if (changing) {\r\n          return;\r\n        }\r\n        /**\r\n         * Triggered after the playlist is sorted internally.\r\n         *\r\n         * @event playlistsorted\r\n         * @type {Object}\r\n         */\r\n  \r\n  \r\n        player.trigger('playlistsorted');\r\n      };\r\n      /**\r\n       * Shuffle the contents of the list randomly.\r\n       *\r\n       * @see   {@link https://github.com/lodash/lodash/blob/40e096b6d5291a025e365a0f4c010d9a0efb9a69/shuffle.js}\r\n       * @fires playlistsorted\r\n       * @todo  Make the `rest` option default to `true` in v5.0.0.\r\n       * @param {Object} [options]\r\n       *        An object containing shuffle options.\r\n       *\r\n       * @param {boolean} [options.rest = false]\r\n       *        By default, the entire playlist is randomized. However, this may\r\n       *        not be desirable in all cases, such as when a user is already\r\n       *        watching a video.\r\n       *\r\n       *        When `true` is passed for this option, it will only shuffle\r\n       *        playlist items after the current item. For example, when on the\r\n       *        first item, will shuffle the second item and beyond.\r\n       */\r\n  \r\n  \r\n      playlist.shuffle = function (_temp) {\r\n        var _ref = _temp === void 0 ? {} : _temp,\r\n            rest = _ref.rest;\r\n  \r\n        var index = 0;\r\n        var arr = list; // When options.rest is true, start randomization at the item after the\r\n        // current item.\r\n  \r\n        if (rest) {\r\n          index = playlist.currentIndex_ + 1;\r\n          arr = (list as videoItem[]).slice(index);\r\n        } // Bail if the array is empty or too short to shuffle.\r\n        if ((arr as videoItem[]).length <= 1) {\r\n          return;\r\n        }\r\n  \r\n        randomize((arr as videoItem[])); // When options.rest is true, splice the randomized sub-array back into\r\n        // the original array.\r\n  \r\n        if (rest) {\r\n          var _list;\r\n          (_list =list as videoItem[]).splice.apply(\r\n            _list, [index,(arr as videoItem[]).length])\r\n            .concat(arr as Array<videoItem>);\r\n        } // If the playlist is changing, don't trigger events.\r\n  \r\n  \r\n        if (changing) {\r\n          return;\r\n        }\r\n        /**\r\n         * Triggered after the playlist is sorted internally.\r\n         *\r\n         * @event playlistsorted\r\n         * @type {Object}\r\n         */\r\n  \r\n  \r\n        player.trigger('playlistsorted');\r\n      }; // If an initial list was given, populate the playlist with it.\r\n  \r\n  \r\n      if (Array.isArray(initialList)) {\r\n        playlist(initialList.slice(), initialIndex); // If there is no initial list given, silently set an empty array.\r\n      } else {\r\n        list = [];\r\n      }\r\n      return playlist;\r\n    }\r\n  \r\n    var version = \"4.2.6\";\r\n  \r\n    var registerPlugin = videojs.registerPlugin || videojs.plugin;\r\n    /**\r\n     * The video.js playlist plugin. Invokes the playlist-maker to create a\r\n     * playlist function on the specific player.\r\n     *\r\n     * @param {Array} list\r\n     *        a list of sources\r\n     *\r\n     * @param {number} item\r\n     *        The index to start at\r\n     */\r\n  \r\n    var plugin = function plugin(list:videoItem[], item:number) {\r\n      factory(<any>this as unknown as videojs.Player, list, item);\r\n    };\r\n  \r\n    registerPlugin('playlist', plugin);\r\n  "]}