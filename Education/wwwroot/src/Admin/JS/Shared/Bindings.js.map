{"version":3,"file":"Bindings.js","sourceRoot":"","sources":["Bindings.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../../global/Extensions/JavascriptExt';\r\nexport interface IBinding <T>{\r\n    Model: T,\r\n    UpdateTheNewllyAddedBinding: () => void;\r\n}\r\ninterface AttributeBinding {\r\n\r\n    Attribute: string,\r\n    RegExText: RegExpExecArray\r\n}\r\nexport class Binding<N extends { [key: string]: any }> implements IBinding<N> {\r\n    private _ObjectScope: N = {} as N;\r\n    private _BindingPropRegEx = new RegExp(/\\{\\{([a-zA-Z_]+)\\}\\}/);\r\n    private _BindedPropertiesOfFirstTime: string[] = [];\r\n    private _AlreadyDefinedProperties: string[] = [];\r\n    private GetBindedAttributes(BindingPropertyName: string) {\r\n        let BindedAtrrbs: { el: JQuery, AttributeName: string, RegExTest: RegExpExecArray }[] = [];\r\n        $(`[ng-controller=${this._controller}]`).find('*').each((i, el) => {\r\n            let $el = $(el);\r\n            let dataBind = $el.data('bind') as AttributeBinding[];\r\n            for (let attr of el.getAttributeNames()) {\r\n                let test = this._BindingPropRegEx.exec($el.attr(attr) as string);\r\n                let dataBindAttr = (dataBind && dataBind.length > 0\r\n                    && dataBind.some(e => e.Attribute == attr && e.RegExText[1].trim() == BindingPropertyName))\r\n                    ? dataBind.find(e => e.Attribute == attr) : null;\r\n                if (test) {\r\n                    if (BindingPropertyName == test[1].trim()) {                      \r\n                        if (dataBind && dataBind.length > 0) {\r\n                            if (dataBind.some(el => el.Attribute == attr)) continue;\r\n                            dataBind.push({ Attribute: attr, RegExText: test });\r\n                        }\r\n                        else {\r\n                            $el.data('bind', <AttributeBinding[]>[{ Attribute: attr, RegExText:test}]);\r\n                        }\r\n                        BindedAtrrbs.push({ el: $el, AttributeName: attr,RegExTest:test })\r\n                    }\r\n                }\r\n                else if (dataBindAttr) {\r\n                    BindedAtrrbs.push({ el: $el, AttributeName: attr, RegExTest: dataBindAttr.RegExText })\r\n                }\r\n            }\r\n        });\r\n        return BindedAtrrbs;\r\n    }\r\n    private GetNewllyAddedTargetBindedAttributes() {\r\n        let attrs: string[] = [];\r\n        $(`[ng-controller=${this._controller}]`).find('*').each((i, el) => {\r\n            let $el = $(el);\r\n            let dataBind = $el.data('bind') as AttributeBinding[];\r\n            for (let attr of el.getAttributeNames()) {\r\n                let test = this._BindingPropRegEx.exec($el.attr(attr) as string);               \r\n                if (test) {\r\n                    if (!attrs.includes(test[1].trim()))\r\n                    attrs.push(test[1].trim());\r\n                }              \r\n            }\r\n        });\r\n        return attrs;\r\n    }\r\n    private DefineProperty(prop: string) {\r\n        //check if that property is defined before\r\n        if (this._AlreadyDefinedProperties.includes(prop)) return;\r\n        this._AlreadyDefinedProperties.push(prop);\r\n        //store instance of this class object to ObjectModel variable\r\n        let ObjectModel = this;\r\n        //set action foreach binding property on set\r\n        Object.defineProperty(this._ObjectScope, prop, {\r\n            get: function () { return this[`_${prop}`]; },\r\n            //handle on BindingObject property value changes\r\n            set: function (value) {\r\n                this[`_${prop}`] = value;\r\n                //handle change to every element has the same binding property\r\n                //element can be (input element|text element)\r\n                $(`[ng-controller=${ObjectModel._controller}]`).find(`[ng-bind= ${ prop }], [ng-model=${ prop }]`)\r\n                    .get().forEach(el => {\r\n                        let $el = $(el);\r\n                        if ($el.is('input') || $el.is('textarea'))\r\n                            $el.val(value);\r\n                        else ObjectModel.BindingFormat ? $el.text(ObjectModel.BindingFormat(value, prop)) : $el.text(value);\r\n                    });\r\n                //handle change to each element has the format of {{propertyName}}\r\n                //get al elements contains that format for that propertyName\r\n                ObjectModel.GetBindedAttributes(prop).forEach((obj) => {\r\n                    obj.el.attr(obj.AttributeName, obj.RegExTest[\"input\"].replace(obj.RegExTest[0], value));\r\n                });\r\n            }\r\n        });\r\n    }\r\n    private constructor(private _controller: string = \"\", private BindingFormat?: (value: any, prop: string) => string) {\r\n        //get all unique binding properties of elements(ng-bind|ng-model)\r\n        this._BindedPropertiesOfFirstTime =\r\n             $(`[ng-controller=${_controller}]`).find('[ng-bind],[ng-model]').get()\r\n                .map(el => $(el).attr('ng-bind') || $(el).prop('ng-bind') ||\r\n                    $(el).attr('ng-model') || $(el).prop('ng-model')).UniqueValues();\r\n        //foreach binding property do this \r\n        for (let prop of this._BindedPropertiesOfFirstTime) {              \r\n            //set action foreach binding property on set\r\n            this.DefineProperty(prop);\r\n            //handle each element is source of binding\r\n            //in most cases this element is input element(has[ng-model property])\r\n            $(`[ng-controller=${_controller}]`).find(`[ng-model=${prop}]`).get().forEach(el => {\r\n                let $el = $(el);\r\n                //intialize BindingObject property with the binding source element \r\n                //that has the binding source property of the same object property \r\n                this._ObjectScope[prop] = $el.val();\r\n                //handle the Binding source element change\r\n                    $el.change(e => {\r\n                        this._ObjectScope[prop] = $(e.target).val();\r\n                    })\r\n                     $el.keyup(e => {\r\n                    this._ObjectScope[prop] = $(e.target).val();\r\n                    })\r\n            });       \r\n        }    \r\n    }\r\n    public UpdateTheNewllyAddedBinding() {\r\n        //get all unique binding properties of elements(ng-bind|ng-model)\r\n       let  newAddedBindingProperties =\r\n            $(`[ng-controller=${this._controller}]`).find('[ng-bind],[ng-model]').get()\r\n                .map(el => $(el).attr('ng-bind') || $(el).prop('ng-bind') ||\r\n                   $(el).attr('ng-model') || $(el).prop('ng-model'))\r\n               .concat(this.GetNewllyAddedTargetBindedAttributes())\r\n                .UniqueValues();\r\n        newAddedBindingProperties.forEach(propName => {\r\n            this.DefineProperty(propName)\r\n        });\r\n        \r\n\r\n    }\r\n    public get Model() {\r\n        return this._ObjectScope;\r\n    }\r\n    public set Model(model:N) {\r\n        this._ObjectScope = model;\r\n    }\r\n    public static controller<M>(name: string,\r\n        callback: (scope: M) => void, BindingFormat?: (value: any,prop:string) => string) {\r\n        let newBingding = new Binding<M>(name, BindingFormat);\r\n        callback(newBingding._ObjectScope);\r\n        return newBingding;\r\n    }\r\n\r\n}\r\n "]}