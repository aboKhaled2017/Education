// <auto-generated />
using System;
using Education.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Education.Migrations
{
    [DbContext(typeof(EduEntities))]
    partial class EduEntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Education.Data.Entities.Adminer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("admin");
                });

            modelBuilder.Entity("Education.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("isEnabled");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("SuperId")
                        .HasColumnName("superid");

                    b.HasKey("Id");

                    b.HasIndex("SuperId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("Education.Data.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnName("categoryID");

                    b.Property<double?>("CostOfCourse")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("desc");

                    b.Property<bool>("IsOpened")
                        .HasColumnName("isOpened");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(60);

                    b.Property<string>("NotifyStudentsWithCourse")
                        .HasColumnName("notify");

                    b.Property<string>("Period")
                        .HasColumnName("period")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartDateOfBegin")
                        .HasColumnName("startDate");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnName("teacherId");

                    b.Property<string>("backgroundImgSrc")
                        .HasColumnName("imgSrc");

                    b.Property<string>("backgroundImgType")
                        .HasColumnName("imgType");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("Education.Data.Entities.Setting", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("Key");

                    b.ToTable("setting");
                });

            modelBuilder.Entity("Education.Data.Entities.Student", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnName("fname")
                        .HasMaxLength(30);

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnName("lname")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("student");
                });

            modelBuilder.Entity("Education.Data.Entities.StudentCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnName("courseId");

                    b.Property<string>("StudentId")
                        .HasColumnName("studentId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnName("regDate");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("studentCourse");
                });

            modelBuilder.Entity("Education.Data.Entities.StudentInfo", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birthDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnName("categoryID");

                    b.Property<string>("FatherPhone")
                        .IsRequired()
                        .HasColumnName("fatherPhone")
                        .HasMaxLength(11);

                    b.Property<string>("FatherWork")
                        .IsRequired()
                        .HasColumnName("fatherWork")
                        .HasMaxLength(50);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("fullName")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(11);

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnName("school")
                        .HasMaxLength(100);

                    b.HasKey("StudentId");

                    b.HasIndex("CategoryId");

                    b.ToTable("studentInfo");
                });

            modelBuilder.Entity("Education.Data.Entities.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("teacher");
                });

            modelBuilder.Entity("Education.Data.Entities.VideoTutorial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnName("courseId");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnName("duration");

                    b.Property<bool>("IsYoutube")
                        .HasColumnName("isYoutube");

                    b.Property<short>("Number")
                        .HasColumnName("number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("videoTutorial");
                });

            modelBuilder.Entity("Education.Data.Entities.Category", b =>
                {
                    b.HasOne("Education.Data.Entities.Category", "SuperCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("SuperId");
                });

            modelBuilder.Entity("Education.Data.Entities.Course", b =>
                {
                    b.HasOne("Education.Data.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Education.Data.Entities.Teacher", "Teacher")
                        .WithMany("TeachedCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Education.Data.Entities.StudentCourse", b =>
                {
                    b.HasOne("Education.Data.Entities.Course", "Course")
                        .WithMany("GoinedStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Education.Data.Entities.Student", "Student")
                        .WithMany("GoinedCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Education.Data.Entities.StudentInfo", b =>
                {
                    b.HasOne("Education.Data.Entities.Category", "Category")
                        .WithMany("GoinedStudents")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Education.Data.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Education.Data.Entities.VideoTutorial", b =>
                {
                    b.HasOne("Education.Data.Entities.Course", "Course")
                        .WithMany("VideosTutorials")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
